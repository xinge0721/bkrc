#ifndef __DATA_BASE_H
#define __DATA_BASE_H

#include "stm32f4xx.h"


static uint8_t SMG_SHOW[8]={0x55,0x04,0x02,0xA1,0xB2,0xC3,0x18,0xBB};  //LED显示
static uint8_t SMG_JSK[8]={0x55,0x04,0x03,0x01,0x00,0x00,0x04,0xBB};   //LED开始计时
static uint8_t SMG_JSG[8]={0x55,0x04,0x03,0x00,0x00,0x00,0x03,0xBB};   //LED关闭计时
static uint8_t SMG_JL[8]={0x55,0x04,0x04,0x00,0x02,0x00,0x06,0xBB};    //LED显示距离

static uint8_t TrafficA_Open[8]={0x55,0x0E,0x01,0x00,0x00,0x00,0x01,0xBB};		// 智能交通灯A 进入识别模式 进入识别模式
static uint8_t TrafficA_Red[8]={0x55,0x0E,0x02,0x01,0x00,0x00,0x03,0xBB};		// 智能交通灯A 识别结果为红色请求确认 
static uint8_t TrafficA_Green[8] ={0x55,0x0E,0x02,0x02,0x00,0x00,0x04,0xBB};	// 智能交通灯A 识别结果为绿色请求确认
static uint8_t TrafficA_Yellow[8]={0x55,0x0E,0x02,0x03,0x00,0x00,0x05,0xBB};	// 智能交通灯A 识别结果为黄色请求确认

static uint8_t TrafficB_Open[8]={0x55,0x0F,0x01,0x00,0x00,0x00,0x01,0xBB};		// 智能交通灯B 进入识别模式 进入识别模式
static uint8_t TrafficB_Red[8]={0x55,0x0F,0x02,0x01,0x00,0x00,0x03,0xBB};		// 智能交通灯B 识别结果为红色请求确认 
static uint8_t TrafficB_Green[8] ={0x55,0x0F,0x02,0x02,0x00,0x00,0x04,0xBB};	// 智能交通灯B 识别结果为绿色请求确认
static uint8_t TrafficB_Yellow[8]={0x55,0x0F,0x02,0x03,0x00,0x00,0x05,0xBB};	// 智能交通灯B 识别结果为黄色请求确认

static uint8_t TrafficC_Open[8]={0x55,0x13,0x01,0x00,0x00,0x00,0x01,0xBB};		// 智能交通灯C 进入识别模式 进入识别模式
static uint8_t TrafficC_Red[8]={0x55,0x13,0x02,0x01,0x00,0x00,0x03,0xBB};		// 智能交通灯C 识别结果为红色请求确认 
static uint8_t TrafficC_Green[8] ={0x55,0x13,0x02,0x02,0x00,0x00,0x04,0xBB};	// 智能交通灯C 识别结果为绿色请求确认
static uint8_t TrafficC_Yellow[8]={0x55,0x13,0x02,0x03,0x00,0x00,0x05,0xBB};	// 智能交通灯C 识别结果为黄色请求确认

static uint8_t TrafficD_Open[8]={0x55,0x14,0x01,0x00,0x00,0x00,0x01,0xBB};		// 智能交通灯D 进入识别模式 进入识别模式
static uint8_t TrafficD_Red[8]={0x55,0x14,0x02,0x01,0x00,0x00,0x03,0xBB};		// 智能交通灯D 识别结果为红色请求确认 
static uint8_t TrafficD_Green[8] ={0x55,0x14,0x02,0x02,0x00,0x00,0x04,0xBB};	// 智能交通灯D 识别结果为绿色请求确认
static uint8_t TrafficD_Yellow[8]={0x55,0x14,0x02,0x03,0x00,0x00,0x05,0xBB};	// 智能交通灯D 识别结果为黄色请求确认

static uint8_t TFT_PageAUp[8]={0x55,0x0B,0x10,0x01,0x00,0x00,0x11,0xBB};			// TFTA显示器 上翻页
static uint8_t TFT_PageADown[8]={0x55,0x0B,0x10,0x02,0x00,0x00,0x12,0xBB};		// TFTA显示器 下翻页
static uint8_t TFT_PageAZD[8]={0x55,0x0B,0x10,0x03,0x00,0x00,0x13,0xBB};		// TFTA显示器 自动翻页

static uint8_t TFT_PageBUp[8]={0x55,0x08,0x10,0x01,0x00,0x00,0x11,0xBB};		// TFTB显示器 上翻页
static uint8_t TFT_PageBDown[8]={0x55,0x08,0x10,0x02,0x00,0x00,0x12,0xBB};		// TFTB显示器 下翻页
static uint8_t TFT_PageBZD[8]={0x55,0x08,0x10,0x03,0x00,0x00,0x13,0xBB};		// TFTB显示器 自动翻页

static uint8_t TFT_PageCUp[8]={0x55,0x12,0x10,0x01,0x00,0x00,0x11,0xBB};		// TFTC显示器 上翻页
static uint8_t TFT_PageCDown[8]={0x55,0x12,0x10,0x02,0x00,0x00,0x12,0xBB};		//TFTC显示器 下翻页
static uint8_t TFT_PageCZD[8]={0x55,0x12,0x10,0x03,0x00,0x00,0x13,0xBB};		// TFTC显示器 自动翻页

static uint8_t H_1[4]={0x00,0xFF,0x0C,~(0x0C)};	 //光源档位加1
static uint8_t H_2[4]={0x00,0xFF,0x18,~(0x18)};	 //光源档位加2
static uint8_t H_3[4]={0x00,0xFF,0x5E,~(0x5E)};	 //光源档位加3

static uint8_t Charge_Open[8]={0x55,0x0A,0x01,0x01,0x00,0x00,0x02,0xBB};		// 无线充电 开启



////static uint8_t Alarm_Open[6]={0x03,0x05,0x14,0x45,0xDE,0x92};		  // 烽火台 开启
//static uint8_t Alarm_Open[6]={0x38,0x33,0x39,0x34,0x32,0xA8};		  // 烽火台 开启
//static uint8_t Alarm_Close[6]={0x67,0x34,0x78,0xA2,0xFD,0x27};		// 烽火台 关闭

//static uint8_t Rotate_1[6]={0xFF,0x14,0x01,0x00,0x00,0x00};		// 立体显示 隧道有事故，请绕行
//static uint8_t Rotate_2[6]={0xFF,0x14,0x02,0x00,0x00,0x00};		// 立体显示 前方施工，请绕行
//	
//static uint8_t Gate_Open[8]={0x55,0x03,0x01,0x01,0x00,0x00,0x02,0xBB};			// 道闸 开启
//static uint8_t Gate_Close[8]={0x55,0x03,0x01,0x02,0x00,0x00,0x03,0xBB};			// 道闸 关闭	
//static uint8_t Gate_GetStatus[8]={0x55,0x03,0x20,0x02,0x00,0x00,0x03,0xBB};		// 道闸 状态查询

//static uint8_t GarageA_To1[8]={0x55,0x0D,0x01,0x01,0x00,0x00,0x02,0xBB};		// 立体车库A 到达第一层
//static uint8_t GarageA_To2[8]={0x55,0x0D,0x01,0x02,0x00,0x00,0x03,0xBB};		// 立体车库A 到达第二层
//static uint8_t GarageA_To3[8]={0x55,0x0D,0x01,0x03,0x00,0x00,0x04,0xBB};		// 立体车库A 到达第三层
//static uint8_t GarageA_To4[8]={0x55,0x0D,0x01,0x04,0x00,0x00,0x05,0xBB};		// 立体车库A 到达第四层
//static uint8_t GarageA_Get_Floor[8]={0x55,0x0D,0x02,0x01,0x00,0x00,0x03,0xBB};	// 立体车库A 请求返回车库位于第几层
//static uint8_t GarageA_Get_Infr[8]={0x55,0x0D,0x02,0x02,0x00,0x00,0x04,0xBB};	// 立体车库A 请求返回前后侧红外状态

//static uint8_t GarageB_To1[8]={0x55,0x05,0x01,0x01,0x00,0x00,0x02,0xBB};		// 立体车库B 到达第一层
//static uint8_t GarageB_To2[8]={0x55,0x05,0x01,0x02,0x00,0x00,0x03,0xBB};		// 立体车库B 到达第二层
//static uint8_t GarageB_To3[8]={0x55,0x05,0x01,0x03,0x00,0x00,0x04,0xBB};		// 立体车库B 到达第三层
//static uint8_t GarageB_To4[8]={0x55,0x05,0x01,0x04,0x00,0x00,0x05,0xBB};		// 立体车库B 到达第四层
//static uint8_t GarageB_Get_Floor[8]={0x55,0x05,0x02,0x01,0x00,0x00,0x03,0xBB};	// 立体车库B 请求返回车库位于第几层
//static uint8_t GarageB_Get_Infr[8]={0x55,0x05,0x02,0x02,0x00,0x00,0x04,0xBB};	// 立体车库B 请求返回前后侧红外状态

//static uint8_t AGV_Thread1[8]={0x55,0x02,0xA0,0xA1,0x00,0x00,0x41,0xBB};		// 移动机器人控制
//static uint8_t AGV_Thread2[8]={0x55,0x02,0xA0,0xA2,0x00,0x00,0x42,0xBB};		// 移动机器人控制

//*******************************************************

static uint8_t H_S[4]={0x80,0x7F,0x05,~(0x05)};	 //照片上翻
static uint8_t H_X[4]={0x80,0x7F,0x1B,~(0x1B)};	 //照片下翻
			 
			 
static uint8_t H_SD[4]={0x00,0xFF,0x45,~(0x45)};	  //隧道风扇系统打开
			 
static uint8_t HW_K[6]={0x03,0x05,0x14,0x45,0xDE,0x92};  //报警器打开
static uint8_t HW_G[6]={0x67,0x34,0x78,0xA2,0xFD,0x27};	//报警器关闭
			
static uint8_t CP_G1[6]={0xFF,0x12,0x01,0x00,0x00,0x00};
static uint8_t CP_G2[6]={0xFF,0x13,0x01,0x00,0x00,0x00};
			 
static uint8_t DZ_K[8]={0x55,0x03,0x01,0x01,0x00,0x00,0x02,0xBB};  //道闸开启
static uint8_t DZ_G[8]={0x55,0x03,0x01,0x02,0x00,0x00,0x03,0xBB};  //道闸关闭	


			
static uint8_t CP_SHOW1[6]={0xFF,0x20,0x4E,0x34,0x30,0x30};
static uint8_t CP_SHOW2[6]={0xFF,0x10,0x59,0x36,0x41,0x33};

#define Principal_Length 50
#define Follower_Length  50

extern uint8_t Principal_Tab[Principal_Length]; 
extern uint8_t Follower_Tab[Follower_Length];

#endif

